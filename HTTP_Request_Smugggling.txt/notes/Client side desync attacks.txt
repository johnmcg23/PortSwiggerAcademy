In high-level terms, a CSD attack involves the following stages:

1. The victim visits a web page on an arbitrary domain containing malicious JavaScript.

2. The JavaScript causes the victim's browser to issue a request to the vulnerable website. This contains an attacker-controlled request prefix in its body, much like a normal request smuggling attack.

3. The malicious prefix is left on the server's TCP/TLS socket after it responds to the initial request, desyncing the connection with the browser.

4. The JavaScript then triggers a follow-up request down the poisoned connection. This is appended to the malicious prefix, eliciting a harmful response from the server.




Testing for client-side desync vulnerabilities (https://portswigger.net/web-security/request-smuggling/browser/client-side-desync)

1. Probe for potential desync vectors in Burp.

2. Confirm the desync vector in Burp.

3. Build a proof of concept to replicate the behavior in a browser.

4. Identify an exploitable gadget.

5. Construct a working exploit in Burp.

6. Replicate the exploit in your browser.