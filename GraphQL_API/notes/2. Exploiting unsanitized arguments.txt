Exploiting unsanitized arguments
At this point, you can start to look for vulnerabilities. Testing query arguments is a good place to start.

If the API uses arguments to access objects directly, it may be vulnerable to access control vulnerabilities. A user could potentially access information they should not have simply by supplying an argument that corresponds to that information. This is sometimes known as an insecure direct object reference (IDOR).


For example, the query below requests a product list for an online shop:


    #Example product query

    query {
        products {
            id
            name
            listed
        }
    }

The product list returned contains only listed products.


    #Example product response

    {
        "data": {
            "products": [
                {
                    "id": 1,
                    "name": "Product 1",
                    "listed": true
                },
                {
                    "id": 2,
                    "name": "Product 2",
                    "listed": true
                },
                {
                    "id": 4,
                    "name": "Product 4",
                    "listed": true
                }
            ]
        }
    }

From this information, we can infer the following:

Products are assigned a sequential ID.
Product ID 3 is missing from the list, possibly because it has been delisted.
By querying the ID of the missing product, we can get its details, even though it is not listed on the shop and was not returned by the original product query.


    #Query to get missing product

    query {
        product(id: 3) {
            id
            name
            listed
        }
    }


    #Missing product response

    {
        "data": {
            "product": {
            "id": 3,
            "name": "Product 3",
            "listed": no
            }
        }
    }