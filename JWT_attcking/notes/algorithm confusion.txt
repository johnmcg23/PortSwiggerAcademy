JWT algorithm confusion
Even if a server uses robust secrets that you are unable to brute-force, 
you may still be able to forge valid JWTs by signing the token using an algorithm 
that the developers haven't anticipated. This is known as an algorithm confusion attack.


# This is the original JWT header
jwt_header = {
    "alg": "RS256",
    "typ": "JWT"
}

# This is the manipulated JWT header
jwt_header = {
    "alg": "HS256",
    "typ": "JWT"
}


In this case, the server uses the RSA public key to verify the signature when the alg is RS256. 
If the alg is changed to HS256, the server might use the RSA public key as the HMAC secret key. 
Since the public key is known to the attacker, they can generate a valid signature and forge arbitrary tokens.



To perform an algorithm confusion attack we follow the steps of:
1. Obtain the server's public key

2. Convert the public key to a suitable format

3. Create a malicious JWT with a modified payload and the alg header set to HS256.

4. Sign the token with HS256, using the public key as the secret.



Step 1:
Servers sometimes expose their public keys as JSON Web Key (JWK) objects via a standard endpoint mapped to:
/jwks.json or /.well-known/jwks.json

Even if the key isn't exposed publicly, you may be able to extract it from a pair of existing JWTs, using the command:
docker run --rm -it portswigger/sig2n <token1> <token2>


Step 2:
In order for the attack to work, the version of the key that you use to sign the JWT must be identical to the server's local copy. 
In addition to being in the same format, every single byte must match, including any non-printing characters.

For the purpose of this example, let's assume that we need the key in X.509 PEM format. You can convert a JWK to a PEM using the JWT Editor extension in Burp as follows:

1. With the extension loaded, in Burp's main tab bar, go to the JWT Editor Keys tab.

2. Click New RSA Key. In the dialog, paste the JWK that you obtained earlier.

3. Select the PEM radio button and copy the resulting PEM key.

4. Go to the Decoder tab and Base64-encode the PEM.

5. Go back to the JWT Editor Keys tab and click New Symmetric Key.

6. In the dialog, click Generate to generate a new key in JWK format.

7. Replace the generated value for the k parameter with a Base64-encoded PEM key that you just copied.

8. Save the key.


Step 3:
Once you have the public key in a suitable format, you can modify the JWT however you like. Just make sure that the alg header is set to HS256.


Step 4:
Sign the token using the HS256 algorithm with the RSA public key as the secret.

