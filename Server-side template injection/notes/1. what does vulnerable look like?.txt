Static templates that simply provide placeholders into which dynamic content is rendered are generally not vulnerable to server-side template injection. 

The classic example is an email that greets each user by their name, such as the following extract from a Twig template:
$output = $twig->render("Dear {first_name},", array("first_name" => $user.first_name) );

This is not vulnerable to server-side template injection because the user's first name is merely passed into the template as data.



However, as templates are simply strings, web developers sometimes directly concatenate user input into templates prior to rendering. 
Let's take a similar example to the one above, but this time, users are able to customize parts of the email before it is sent. 

For example, they might be able to choose the name that is used:
$output = $twig->render("Dear " . $_GET['name']);



In this example, instead of a static value being passed into the template, part of the template itself is being dynamically generated using the GET parameter name. 

As template syntax is evaluated server-side, this potentially allows an attacker to place a server-side template injection payload inside the name parameter as follows:

http://vulnerable-website.com/?name={{bad-stuff-here}}


In some ways, this is similar to SQL injection vulnerabilities occurring in poorly written prepared statements.